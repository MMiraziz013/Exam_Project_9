// <auto-generated />
using System;
using Clean.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Clean.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Clean.Domain.Entities.Attendance", b =>
                {
                    b.Property<string>("AttendanceId")
                        .HasColumnType("text");

                    b.Property<string>("ClassroomId")
                        .HasColumnType("text");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Absent");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AttendanceId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.Classroom", b =>
                {
                    b.Property<string>("ClassroomId")
                        .HasColumnType("text");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("integer");

                    b.HasKey("ClassroomId");

                    b.ToTable("classrooms", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.Exam", b =>
                {
                    b.Property<string>("ExamId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExamId");

                    b.HasIndex("SubjectId");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.ExamResult", b =>
                {
                    b.Property<string>("ResultId")
                        .HasColumnType("text");

                    b.Property<string>("ExamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ResultId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("exam_results", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.Lesson", b =>
                {
                    b.Property<string>("LessonId")
                        .HasColumnType("text");

                    b.Property<string>("ClassroomId")
                        .HasColumnType("text");

                    b.Property<DateTime>("LessonDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("TimetableId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LessonId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimetableId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EnrollmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("StudentId");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.StudentGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("Clean.Domain.Entities.StudentGroupMember", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("text");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MembershipId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StudentId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("StudentGroupMembers");
                });

            modelBuilder.Entity("Clean.Domain.Entities.StudentIssue", b =>
                {
                    b.Property<string>("IssueId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateReported")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IssueId");

                    b.HasIndex("StudentId");

                    b.ToTable("student_issues", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SubjectId");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("HireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TeacherId");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.Timetable", b =>
                {
                    b.Property<string>("TimetableId")
                        .HasColumnType("text");

                    b.Property<string>("ClassroomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StudentGroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("TimetableId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("timetables", (string)null);
                });

            modelBuilder.Entity("Clean.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("Clean.Domain.Entities.Classroom", null)
                        .WithMany("Attendances")
                        .HasForeignKey("ClassroomId");

                    b.HasOne("Clean.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Attendances")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Exam", b =>
                {
                    b.HasOne("Clean.Domain.Entities.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Clean.Domain.Entities.ExamResult", b =>
                {
                    b.HasOne("Clean.Domain.Entities.Exam", "Exam")
                        .WithMany("ExamResults")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entities.Student", "Student")
                        .WithMany("ExamResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Clean.Domain.Entities.Classroom", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ClassroomId");

                    b.HasOne("Clean.Domain.Entities.Subject", null)
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId");

                    b.HasOne("Clean.Domain.Entities.Timetable", "Timetable")
                        .WithMany()
                        .HasForeignKey("TimetableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("Clean.Domain.Entities.StudentGroupMember", b =>
                {
                    b.HasOne("Clean.Domain.Entities.StudentGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entities.Student", "Student")
                        .WithMany("Groups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Clean.Domain.Entities.StudentIssue", b =>
                {
                    b.HasOne("Clean.Domain.Entities.Student", "Student")
                        .WithMany("StudentIssues")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Timetable", b =>
                {
                    b.HasOne("Clean.Domain.Entities.Classroom", "Classroom")
                        .WithMany("Timetables")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany()
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entities.Subject", "Subject")
                        .WithMany("Timetables")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clean.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Timetables")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("StudentGroup");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Classroom", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Lessons");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Exam", b =>
                {
                    b.Navigation("ExamResults");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("ExamResults");

                    b.Navigation("Groups");

                    b.Navigation("StudentIssues");
                });

            modelBuilder.Entity("Clean.Domain.Entities.StudentGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Lessons");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("Clean.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Timetables");
                });
#pragma warning restore 612, 618
        }
    }
}
